import { Box3, ColorRepresentation, Group, Mesh, Object3D, Vector3 } from 'three';
import { VisualizeFocusType } from '../../../../LocationIntelligenceViewerV2/engine/internal/enum/visualizeFocusType';
import { FocusableObject } from '../../../../Viewer/models/focusableObject';
import { IInteractable } from '../../../../Viewer/models/Interactable';
import { Label } from '../../../../Viewer/models/label';
import { LocalFocusableObject } from '../../../../Viewer/models/localFocusableObject';
import { ILevel } from '../../../interfaces/ILevel';
import { IRoom } from '../../../interfaces/IRoom';
import { HighlightOptions } from '../../../utils/highlightOptions';
import { SmartBuilding, SmartLevel } from '../../external/smart';
import { Boundary } from '../../gltf/boundary';
import { Level as GltfLevel } from '../../gltf/level';
import { NodeCollection } from '../../nodeCollection/nodeCollection';
import { Building } from '../building';
import { Room } from '../room';
import { Zone } from '../zone';
import { LevelMesh } from './levelMesh';
declare type onMouseEvent = (level: Level) => void;
declare type NodeTypes = Building | Level | Zone | Room | NodeCollection;
export declare class Level extends Object3D implements LocalFocusableObject, IInteractable {
    focusableType: VisualizeFocusType.LOCAL;
    visible: boolean;
    sourceId: string;
    rooms: Room[];
    zones: Zone[];
    elevation: number;
    parentBuilding: Building;
    nodeType: 'Level';
    levelMesh: LevelMesh;
    private _center;
    boundingBox: Mesh;
    private _onHover;
    private _onUnHover;
    externalReferenceId: string;
    private nodeDepth;
    private isVisisbleInScene;
    roomLabels: Label[];
    isLabelAdeded: boolean;
    defaultDepth: number;
    private boundsSize;
    constructor(level: ILevel, rooms: Map<string, IRoom>, roomBoundariesByLevel: Map<string, Boundary[]>, boundaries: Map<string, Boundary>, geometryParent: Group, gltfLevel: GltfLevel, onHover: onMouseEvent, onUnHover: onMouseEvent, parentBuilding: Building);
    addToLevelMesh(mesh: Mesh): void;
    setInteractable(interactable: boolean): void;
    claimInteracatable(): void;
    get maximumBoundingDimension(): number;
    get boundingDimensions(): Box3;
    get cameraFocusPoint(): Vector3;
    get intermediateCoordinate(): import("../../map/coordinate").Coordinate;
    get center(): Vector3;
    setDebugVisible(visible: boolean): void;
    setZoneRoomInteractable(interactable: boolean): void;
    onHoverEnter(): void;
    onHoverExit(): void;
    onClick(): void;
    onAddToWorld(): void;
    onRemoveFromWorld(): void;
    asSmartLevel(parent: SmartBuilding, focusOn: (focusableObject: FocusableObject) => Promise<void>): SmartLevel;
    findNodeById(nodeId: number): Level | Zone | Room;
    containsPoint(point: Vector3): boolean;
    makeOnlyRoomsInteractable(): void;
    highlight(color?: ColorRepresentation, options?: HighlightOptions): void;
    unHighlight(removeHighlightPersistance?: boolean): void;
    private setDimensionalData;
    private createBoundingBox;
    isolateVisibility(sourceId: string): void;
    showRoomLabels(show: boolean, selectedNode?: NodeTypes): void;
    addRoomLabels(show: boolean): void;
    resetVisibility(): void;
    updateDepth(depth: number): void;
}
export {};
