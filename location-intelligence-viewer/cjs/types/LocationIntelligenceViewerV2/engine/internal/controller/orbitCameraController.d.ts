import { Camera, Vector3 } from "three";
import { Coordinate } from "../../../../LocationIntelligenceViewer/model/map/coordinate";
import { onZoomInteraction } from "../../../hook/useEngine";
import { VisualizeRenderer } from "../../core/visualizeRenderer";
import { IInputController } from "../../interface/inputControllerInterface";
import { VisualizeControlMode } from "../enum/visualizeControlMode";
import { VisualizeControlScope } from "../enum/visualizeControlScope";
export declare class OrbitCameraController implements IInputController {
    controlScope: VisualizeControlScope;
    controlMode: VisualizeControlMode;
    sceneFocus: Vector3;
    worldFocus: Coordinate;
    cameraPosition: Vector3;
    private readonly _mouseButtons;
    private readonly _touches;
    private readonly _spherical;
    private readonly _sphericalDelta;
    private readonly lastPosition;
    private readonly lastQuaternion;
    private _state;
    private _canvas;
    private _enabled;
    private _camera;
    private _target;
    private _minDistance;
    private _maxDistance;
    private _minPolarAngle;
    private _maxPolarAngle;
    private _minAzimuthAngle;
    private _maxAzimuthAngle;
    private _screenSpacePanning;
    private _scale;
    private _panOffset;
    private _enableRotatingZ;
    private _enableRotating;
    private _rotateSpeed;
    private _enablePan;
    private _panSpeed;
    private _enableZoom;
    private _zoomSpeed;
    private _rotateStart;
    private _rotateEnd;
    private _rotateDelta;
    private _panStart;
    private _panEnd;
    private _panDelta;
    private _dollyStart;
    private _dollyEnd;
    private _dollyDelta;
    private _pointers;
    private _pointerPositions;
    private _offset;
    private _quat;
    private _quatInverse;
    private _onZoom;
    private _onMouseWheelEvent;
    private _onPointerDownEvent;
    private _onPointerUpEvent;
    private _onPointerMoveEvent;
    private _onContextMenuEvent;
    private _onPointerCancelEvent;
    constructor(camera: Camera, renderer: VisualizeRenderer, onZoom: onZoomInteraction);
    getPitch(): number;
    getBearing(): number;
    setUp(): void;
    animateCameraToPosition(): Promise<any>;
    sync(controller: IInputController): void;
    validate(): void;
    dispose(): void;
    update(): boolean;
    get enabled(): boolean;
    set enabled(enabled: boolean);
    setTarget(target: Vector3): void;
    setPosition(_cameraPosition: Vector3): void;
    get target(): Vector3;
    private addEventListeners;
    private removeEventListeners;
    private rotateLeft;
    private rotateUp;
    private panLeft;
    private panUp;
    private pan;
    private dollyOut;
    private dollyIn;
    private handleMouseDownRotate;
    private handleMouseDownDolly;
    private handleMouseDownPan;
    private handleMouseMoveRotate;
    private handleMouseMoveDolly;
    private handleMouseMovePan;
    private handleMouseWheel;
    private handleTouchStartRotate;
    private handleTouchStartPan;
    private handleTouchStartDolly;
    private handleTouchStartDollyPan;
    private handleTouchStartDollyRotate;
    private handleTouchMoveRotate;
    private handleTouchMovePan;
    private handleTouchMoveDolly;
    private handleTouchMoveDollyPan;
    private handleTouchMoveDollyRotate;
    private onPointerDown;
    private onPointerMove;
    private onPointerUp;
    private onPointerCancel;
    private onMouseDown;
    private onMouseMove;
    private onMouseWheel;
    private onTouchStart;
    private onTouchMove;
    private onContextMenu;
    private addPointer;
    private removePointer;
    private trackPointer;
    private getSecondPointerPosition;
    private getZoomScale;
    enableZOrbit(enable: boolean): void;
}
