import { Camera, Vector3 } from 'three';
import { Coordinate } from '../../../../LocationIntelligenceViewer/model/map/coordinate';
import { VisualizeMapboxMap } from '../../core/visualizeMapboxMap';
import { VisualizeRenderer } from '../../core/visualizeRenderer';
import { VisualizeScene } from '../../core/visualizeScene';
import { IInputController } from '../../interface/inputControllerInterface';
import { VisualizeControlMode } from '../enum/visualizeControlMode';
import { VisualizeControlScope } from '../enum/visualizeControlScope';
import { WorldTransform } from '../worldTransform';
export declare class GlobeController implements IInputController {
    controlScope: VisualizeControlScope;
    controlMode: VisualizeControlMode;
    sceneFocus: Vector3;
    worldFocus: Coordinate;
    cameraPosition: Vector3;
    private _camera;
    private _halfFov;
    private _cameraToCenterDistance;
    private _cameraTranslateZ;
    private _worldTransform;
    private _enabled;
    private _renderer;
    private _mapboxMap;
    private _scene;
    constructor(camera: Camera, worldTransform: WorldTransform, renderer: VisualizeRenderer, mapboxMap: VisualizeMapboxMap, scene: VisualizeScene);
    get enabled(): boolean;
    set enabled(enabled: boolean);
    getBearing(): number;
    getPitch(): number;
    update(): void;
    setUp(): void;
    dispose(): void;
    animateCameraToPosition(): Promise<any>;
    sync(controller: IInputController): void;
    validate(): void;
    private setupCamera;
    private updateCamera;
    private updateWorldCamera;
}
