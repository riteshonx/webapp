import { Box3, BoxBufferGeometry, BufferGeometry, Group, Mesh, Object3D, Plane, Vector3 } from 'three';
import { DisplayStyle } from '../../LocationIntelligenceViewer/materials/displayStyle';
import { ClippingPlanes } from '../../LocationIntelligenceViewer/model/building/clippingPlanes';
import { Gltf } from '../../LocationIntelligenceViewer/model/gltf/gltf';
import { Coordinate } from '../../LocationIntelligenceViewer/model/map/coordinate';
import { VisualizeRenderer } from '../../LocationIntelligenceViewerV2/engine/core/visualizeRenderer';
import { FocusableObject } from './focusableObject';
import { IInteractable } from './Interactable';
export declare class Model extends Object3D implements FocusableObject, IInteractable {
    coordinate: Coordinate;
    intermediateCoordinate: Coordinate;
    setSsaoClippingPlanes: (clippingPlanes: Plane[]) => void;
    protected clippingPlanes: ClippingPlanes;
    private interactableMeshes;
    protected clippingGroup: Group;
    private boundingVolume;
    constructor(gltf: Gltf, name: string, renderer: VisualizeRenderer);
    get center(): Vector3;
    get cameraFocusPoint(): Vector3;
    get maximumBoundingDimension(): number;
    get boundingDimensions(): Box3;
    get isModel(): boolean;
    getBoundingObject(): Mesh<BoxBufferGeometry, import("three").Material | import("three").Material[]>;
    setBoundingBox(): void;
    rotateX90Degrees(): void;
    centerOnGround(): void;
    setAllInteractable(interactable: boolean): void;
    displayBelowGrade(): void;
    hide(): void;
    show(): void;
    onClick(): void;
    onHoverEnter(): void;
    onHoverExit(): void;
    buildClippingPlanes(): void;
    getDebuggablePlaneGroup(): Group;
    set interactable(interactable: boolean);
    addMesh(mesh: Mesh, parent: Group): void;
    removeMesh(mesh: Mesh, parent: Group): void;
    setDisplayStyle(displayStyle: DisplayStyle): void;
    protected unitsPerMeter(): number;
    protected setUpMesh(mesh: Mesh): void;
    protected createPlaneStencilGroup(geometry: BufferGeometry, plane: Plane, renderOrder: number): Group;
}
