import { Box3, Camera, Group, Light, Object3D, Scene, Vector3 } from 'three';
import { DisplayStyle } from '../../../LocationIntelligenceViewer/materials/displayStyle';
import { Coordinate } from '../../../LocationIntelligenceViewer/model/map/coordinate';
export declare class VisualizeScene extends Scene {
    lights: Light[];
    boundingBox: Box3;
    private boundingBoxCenter;
    private width;
    private height;
    private depth;
    private camera;
    private root;
    private _models;
    private _displayStyle;
    displayBelowGrade(displayBelowGrade: boolean): void;
    dispose(): void;
    constructor(lights: Light[], camera: Camera, root: Group);
    addUnscaled(...object: Object3D<Event | any>[]): void;
    addTemporary(duration: number, ...object: Object3D<Event | any>[]): void;
    setCenter(coordinate: Coordinate): void;
    setDisplayStyle(displayStyle: DisplayStyle): void;
    getLocalPositionFromWorld(worldPosition: Vector3): Vector3;
    getWorldPositionFromLocal(localPosition: Vector3): Vector3;
    getValueInWorldScale(value: number): number;
    getWorldScale(): Vector3;
    get north(): Vector3;
    get rootUp(): Vector3;
    get worldOrigin(): Vector3;
    get cameraFocusPoint(): Vector3;
    get maximumBoundingDimension(): number;
    get boundingDimensions(): Box3;
    private calculateBoundingBox;
    addToWorld(...object: Object3D<Event | any>[]): Window & typeof globalThis;
    removeFromWorld(...object: Object3D<Event | any>[]): Window & typeof globalThis;
    private _addUnscaled;
    private _addTemporary;
    clear(): this;
    private addPermanentFixtures;
}
