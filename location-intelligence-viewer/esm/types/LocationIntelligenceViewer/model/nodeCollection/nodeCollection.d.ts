import { Box3, Vector3 } from 'three';
import { VisualizeFocusType } from '../../../LocationIntelligenceViewerV2/engine/internal/enum/visualizeFocusType';
import { LocalFocusableObject } from '../../../Viewer/models/localFocusableObject';
import { Building } from '../building/building';
import { Level } from '../building/level';
import { Room } from '../building/room';
import { Zone } from '../building/zone';
import { SmartNodeCollection, SmartProjectSite } from '../external';
import { Coordinate } from '../map/coordinate';
declare type NodeTypes = Building | Level | Zone | Room | NodeCollection;
export declare class NodeCollection implements LocalFocusableObject {
    focusableType: VisualizeFocusType.LOCAL;
    nodeType: 'NodeCollection';
    nodes: NodeTypes[];
    name: string;
    id: number;
    buildingsMap: Map<number, Building>;
    levelsMap: Map<number, Level>;
    zonesMap: Map<number, Zone>;
    roomsMap: Map<number, Room>;
    nodeCollectionMap: Map<number, NodeCollection>;
    boundingBox: Box3;
    externalReferenceId: string;
    private _parentLevel;
    constructor(nodes: NodeTypes[], name: string, externalReferenceId: string);
    highlight(): void;
    unHighlight(): void;
    updatedParentLevel(parentLevel: Level): void;
    asSmartNodeCollection(smartProject: SmartProjectSite): SmartNodeCollection;
    get parentNode(): Level;
    get boundingVolume(): Box3;
    get center(): Vector3;
    get parentLevel(): Level;
    private calculateParentLevel;
    private buildNodeMaps;
    private addNodeCollection;
    private getParentLevelId;
    get cameraFocusPoint(): Vector3;
    get intermediateCoordinate(): Coordinate;
    get maximumBoundingDimension(): number;
    get boundingDimensions(): Box3;
    private getBox3;
}
export {};
