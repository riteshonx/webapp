import { BufferGeometry, ColorRepresentation, Material, Mesh } from 'three';
import { VisualizeRenderer } from '../../../../LocationIntelligenceViewerV2/engine/core/visualizeRenderer';
import { VisualizeFocusType } from '../../../../LocationIntelligenceViewerV2/engine/internal/enum/visualizeFocusType';
import { FocusableObject } from '../../../../Viewer/models/focusableObject';
import { LocalFocusableObject } from '../../../../Viewer/models/localFocusableObject';
import { Model } from '../../../../Viewer/models/model';
import { HighlightOptions } from '../../../utils/highlightOptions';
import { SmartBuilding } from '../../external/smart';
import { Gltf } from '../../gltf/gltf';
import { GeoMappedObject } from '../../map/geoMappedObject';
import { BuildingLayout } from '../../project/buildingLayout';
import { IBuilding } from '../../project/IBuilding';
import { Level } from '../level';
import { Room } from '../room';
import { Zone } from '../zone';
export declare class Building extends Model implements GeoMappedObject, LocalFocusableObject {
    focusableType: VisualizeFocusType.LOCAL;
    buildingId: string;
    modelId: string;
    levels: Level[];
    trueNorth: number;
    elevation: number;
    nodeType: 'Building';
    externalReferenceId: string;
    private currentOpenLevel;
    private buildingMesh;
    private nodeDepth;
    private isVisisbleInScene;
    constructor(model: Gltf, layout: BuildingLayout, building: IBuilding, renderer: VisualizeRenderer);
    private mergeGltfLevels;
    private buildLevels;
    private setZoneRoomsInteractable;
    makeOnlyLevelsInteractable(levels?: Level[]): void;
    makeOnlyBuildingInteractable(): void;
    makeOnlyRoomsInteractable(level: Level): void;
    claimSsaoClippingPlanes(): void;
    releaseSsaoClippingPlanes(): void;
    enter(): void;
    leave(): void;
    highlight(color?: ColorRepresentation, options?: HighlightOptions): void;
    unHighlight(removeHighlightPersistance?: boolean): void;
    unHighlightZones(): void;
    highlightZone(zone: Zone, color?: ColorRepresentation): void;
    highlightRoom(room: Room, color?: ColorRepresentation): void;
    unHighlightRooms(): void;
    onlyShowLevel(level: Level): void;
    resetOpenLevel(): void;
    initInWorld(): void;
    show(): void;
    hide(): void;
    onAddToWorld(): void;
    onRemoveFromWorld(): void;
    asSmartBuilding(focusOn: (focusableObject: FocusableObject) => Promise<void>): SmartBuilding;
    findNodeById(nodeId: number): Building | Level | Zone | Room;
    private findLevelBySmartLevel;
    private findLevelsBySmartLevels;
    private isolateVisibility;
    private resetVisibility;
    private setClippingPlanesToLevel;
    protected setUpMesh(mesh: Mesh<BufferGeometry, Material | Material[]>): void;
}
