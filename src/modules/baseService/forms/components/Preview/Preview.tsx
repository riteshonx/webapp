import React, { ReactElement } from 'react'
import { TemplateData } from '../../models/template';
import { Grid } from '@material-ui/core';
import ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';
import './Preview.scss';
import { InputType } from '../../../../../utils/constants';
import {Loaction, Text, TextArea} from '../Text/Text';
import {DatePicker, DateTimePicker, TimePicker} from '../DatePicker/DatePicker';
import Attachement from '../Attachment/Attachement';
import Select from '../Select/Select';
import Boolean from '../Boolean/Boolean';
import CustomTableView from '../CustomTableView/CustomTableView';
import AutoGeneratedFields from '../AutoGeneratedFields/AutoGeneratedFields';

interface IPreview{
    closePreview:  (event: boolean) => void;
    templateFieldList: Array<TemplateData>;
    formName: string|undefined;
    autoGeneratedFields: Array<TemplateData>;
}

function Preview({closePreview, templateFieldList, formName, autoGeneratedFields}:IPreview): ReactElement {
    const renderInputFields=()=>{
        return templateFieldList.map((item: TemplateData, i:number) => {
            if(!item.autoGenerated){
                return  <Grid item key={`${item.caption}-${i}`}  sm={item.width}
                                className="fieldPreview__body__box">
                            <div className="fieldPreview__body__box__label">{item.caption}{item.required?(" *"):("")}</div>
                                {renderInput(item,i)}
                        </Grid>
            } 
            return "";
        })
    }

    const close=()=>{
        closePreview(false);
    }

    const renderInput=(inputField:TemplateData,index: number)=>{
        switch(Number(inputField.fieldTypeId)){
            case InputType.TEXT:
            case InputType.COMMENTS:{
                return <Text index={index} field={inputField}/>
            }
            case InputType.LONGTEXT:
                return <TextArea index={index} field={inputField}/>
            case InputType.DATEPICKER:{
                return <DatePicker index={index} field={inputField}/>
            }
            case InputType.DATETIMEPICKER:{
                return <DateTimePicker index={index} field={inputField}/>
            }
            case InputType.TIMEPICKER:{
                return <TimePicker index={index} field={inputField}/>
            }
            case InputType.ATTACHMENT:{
                return <Attachement index={index} field={inputField}/>
            }
            case InputType.CUSTOMDROPDOWN:
            case InputType.MULTIVALUEUSER:
            case InputType.SINGLEVALUEUSER:
            case InputType.SINGLEVALUECOMPANY:
            case InputType.CUSTOMNESTEDDROPDOWN:
            case InputType.MULTIVALUECOMPANY:{
                return <Select field={inputField} index={index}/>
            }
            case InputType.BOOLEAN:{
                return <Boolean field={inputField} index={index}/>
            }
            case InputType.LOCATION:
            case InputType.LOCATIONTREE:{
                return <Loaction index={index} field={inputField}/>
            }
            case InputType.TABLE:{
                return <CustomTableView index={index} field={inputField}/>
            }
            default:{
                return <Text index={index} field={inputField}/>
            }
        }
    }

    return (
        <div className="fieldPreview">
            <div className="fieldPreview__header">
                <div className="fieldPreview__header__name">
                    <ArrowBackIosIcon onClick={close} className="fieldPreview__header__icon"/>  {formName}
                </div>
                <Grid container className="fieldPreview__header__autogeneratedFields">
                    {autoGeneratedFields.map((item: TemplateData)=>(
                        <Grid item xs={2} className="fieldPreview__header__autogeneratedFields__item">
                            {item.caption}: --
                        </Grid>
                    ))}
                </Grid>
            </div>
            <Grid container className="fieldPreview__body">
                <Grid item xs={1}></Grid>
                <Grid item xs={10}>
                    <Grid container>
                        {renderInputFields()}
                    </Grid>
                </Grid>
                <Grid item xs={1}></Grid>
            </Grid>
        </div>
       
    )
}

export default Preview
