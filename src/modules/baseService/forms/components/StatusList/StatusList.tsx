import { FC, useState, useEffect } from "react";
import { Box, Button, IconButton } from "@material-ui/core";
import { Dialog, DialogContent } from "@material-ui/core";
import { createStyles, makeStyles } from "@material-ui/core/styles";
import { useQuery } from "@apollo/client";
import { FETCH_STATUS_LIST } from "src/modules/baseService/forms/grqphql/queries/statusList";
import CloseIcon from "@material-ui/icons/HighlightOff";
import StatusHeader from "./components/StatusHeader";
import CircularProgress from "@material-ui/core/CircularProgress";
import StatusListItem, {
  ActionType,
  StatusListItemType,
} from "./components/StatusListItem";
import { canCreateTemplate } from "src/modules/baseService/forms/utils/permission";

const useStyles = makeStyles(() =>
  createStyles({
    addStatusButton: {
      border: "1px dashed lightgrey",
      textTransform: "none",
      background: "#f7f7f7",
      width: "100%",
      marginTop: "1rem",
      fontSize: "1.1rem",
    },
    closeIcon: {
      marginRight: "1rem",
    },
  })
);

interface StatusListProps {
  open: boolean;
  onClose: () => void;
  selectedFeature: any;
}

const StatusList: FC<StatusListProps> = ({
  open,
  onClose,
  selectedFeature,
}) => {
  const classes = useStyles();
  const [statusListItems, setStatusListItems] = useState<StatusListItemType[]>(
    []
  );
  const { loading, error, data, refetch } = useQuery(FETCH_STATUS_LIST, {
    variables: { featureId: selectedFeature?.id },
    fetchPolicy: "network-only",
    context: { role: "viewFormTemplate" },
  });
  const [disableAddStatusButton, setDisableAddStatusButton] = useState(false);

  useEffect(() => {
    if (!error && data) {
      const statusItems = data.formStatus.map(
        (item: any): StatusListItemType => {
          return {
            id: item.id,
            status: item.status,
            open: item.openStatus,
            featureId: selectedFeature?.id,
            isDefaultItem: item.projectFeature ? false : true,
          };
        }
      );
      setStatusListItems(statusItems);
    }
  }, [data]);

  const handleAddStatus = () => {
    setStatusListItems((prev: any) => {
      return [
        ...prev,
        {
          id: Math.floor(Math.random() * -1000), // negative id to indicate that the id is temporarily generated by the client for create mode
          status: "",
          open: false,
          featureId: selectedFeature?.id,
        },
      ];
    });
    setDisableAddStatusButton(true);
  };

  const handleActionClick = (id: number, type: ActionType) => {
    //refetch all entries every time some action is performed
    refetch();
    switch (type) {
      case "SUBMIT":
        setDisableAddStatusButton(false);
        break;
      case "DISCARD":
        const listItems = statusListItems.filter((item) => item.id !== id);
        setStatusListItems(listItems);
        setDisableAddStatusButton(false);
    }
  };

  return (
    <Dialog open={open} fullWidth>
      <Box
        display="flex"
        bgcolor="var(--onx-text-black)"
        justifyContent="space-between"
        alignItems="center"
      >
        <Box color="#fff" paddingLeft="2.2rem">
          Status List - {selectedFeature?.name}
        </Box>
        <IconButton classes={{ root: classes.closeIcon }} onClick={onClose}>
          <CloseIcon style={{ color: "#fff" }} />
        </IconButton>
      </Box>
      <DialogContent style={{ paddingBottom: "2rem" }}>
        <StatusHeader />
        <hr
          style={{
            marginTop: "5px",
            border: "none",
            borderTop: "1px solid lightgrey",
          }}
        />
        {loading ? (
          <Box
            height="240px"
            display="flex"
            justifyContent="center"
            alignItems="center"
            flexDirection="column"
          >
            <CircularProgress style={{ color: "#000" }} />
            <p style={{ marginTop: "1rem" }}>Please wait...</p>
          </Box>
        ) : (
          <>
            <Box minHeight="200px" maxHeight="350px" overflow="auto">
              {statusListItems.map((item: any) => (
                <StatusListItem
                  key={item.id}
                  {...item}
                  onAction={handleActionClick}
                />
              ))}
            </Box>
            {canCreateTemplate && (
              <Button
                onClick={handleAddStatus}
                variant="outlined"
                classes={{ root: classes.addStatusButton }}
                disabled={disableAddStatusButton}
              >
                + Click here to add status
              </Button>
            )}
          </>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default StatusList;
