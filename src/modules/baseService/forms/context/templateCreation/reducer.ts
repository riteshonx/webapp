import { Action } from '../../../../../models/context';
import { TemplateData, IFieldInput, CustomList } from '../../models/template';
import {FIELDLIST, TEMPLATELIST,
    DRAGEDFROM,
    FORMNAME, CURRENTTAB,
    SELECTEDTEMPLATEFIELD,
    DROPEDTO, FEATUREID,
    TEMPLATEID, UPDATEINDEX,
    SYSTEMGENERATED,
    FORMNAMEERROR, ISDUPLICATE, CUSTOMLIST,
    AUTOGENERATEDFIELD,
    DRAGEDINPUT, ISEDIT,
    ORIGINALTEMPLATELIST,
    FORMFEATURETYPE,TABLEFORMDATA} from './action';


interface CreateTemplate{
    fieldList: Array<IFieldInput>;
    autoGeneratedFields: Array<TemplateData>,
    templateList: Array<TemplateData>;
    originalTemplateList: Array<TemplateData>;
    selectedTemplateField: TemplateData|null;
    dropedTo: number;
    dragedFrom: number;
    formName: string;
    currentTab: string;
    featureId: number;
    templateId: number;
    updateIndex: number;
    formNameError: boolean;
    isDuplicate: boolean;
    customList: Array<CustomList>;
    dragedInput: IFieldInput|unknown;
    isEdit: boolean;
    systemGenerated: boolean;
    formFeatureType: string;
    tableFormData:any;
}

export const createTemplateInitial={
    fieldList: [],
    autoGeneratedFields: [],
    templateList: [],
    originalTemplateList: [],
    dropedTo: -1,
    dragedFrom: -1,
    selectedTemplateField: null,
    formName: '',
    currentTab: 'ADDNEW',
    featureId: -1,
    templateId: -1,
    updateIndex: -1,
    formNameError: false,
    isDuplicate: false,
    customList: [],
    dragedInput: null,
    isEdit: false,
    systemGenerated: false,
    formFeatureType: '',
    tableFormData:{},

}

export const createTemplateReducer=(state: CreateTemplate=createTemplateInitial, action: Action): CreateTemplate=>{
    switch(action.type){
        case FIELDLIST:{
           return {
                ...state,
                fieldList: action.payload
            }
        }
        case TEMPLATELIST:{
            return {
                 ...state,
                 templateList: action.payload
             }
         }
         case DRAGEDFROM:{
            return {
                 ...state,
                 dragedFrom: action.payload
             }
         }
         case DROPEDTO:{
            return {
                 ...state,
                 dropedTo: action.payload
             }
         }
         case FORMNAME:{
            return {
                 ...state,
                 formName: action.payload
             }
         }
         case SELECTEDTEMPLATEFIELD:{
            return {
                 ...state,
                 selectedTemplateField: action.payload
             }
         }
         case CURRENTTAB:{
            return {
                ...state,
                currentTab: action.payload
            }
         }
         case FEATUREID:{
            return {
                ...state,
                featureId: action.payload
            }
         }
         case TEMPLATEID:{
            return {
                ...state,
                templateId: action.payload
            }
         }
         case UPDATEINDEX:{
            return {
                ...state,
                updateIndex: action.payload
            }
         }
         case FORMNAMEERROR:{
            return {
                ...state,
                formNameError: action.payload
            }
         }
         case ISDUPLICATE:{
            return {
                ...state,
                isDuplicate: action.payload
            }
         }
         case CUSTOMLIST:{
             return{
                 ...state,
                 customList: action.payload
             }
         }
         case DRAGEDINPUT:{
             return{
                 ...state,
                 dragedInput: action.payload
             }
         }
         case ISEDIT:{
             return{
                 ...state,
                 isEdit: action.payload
             }
         }
         case SYSTEMGENERATED:{
             return {
                 ...state,
                 systemGenerated: action.payload
             }
         }
         case AUTOGENERATEDFIELD:{
             return {
                 ...state,
                 autoGeneratedFields: action.payload
             }
         }
         case FORMFEATURETYPE:{
             return {
                 ...state,
                 formFeatureType: action.payload
             }
         }
        case TABLEFORMDATA:{
            return {
                ...state,
                tableFormData: action.payload
            }
        }
        case ORIGINALTEMPLATELIST:{
            return{
                ...state,
                originalTemplateList: action.payload
            }
        }
         default: return state;
    }

}