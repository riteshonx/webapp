import {Action} from '../../../../../models/context';
import { CustomList, IFieldInput,TableDataList } from '../../models/template';

export const FIELDLIST= "FIELDLIST";
export const TEMPLATELIST= "TEMPLATELIST";
export const DRAGEDFROM= "DRAGEDFROM";
export const DROPEDTO= "DROPEDTO";
export const SELECTEDTEMPLATEFIELD= 'SELECTEDTEMPLATEFIELD';
export const FORMNAME= 'FORMNAME';
export const CURRENTTAB= 'CURRENTTAB';
export const FEATUREID= 'FEATUREID';
export const TEMPLATEID= 'TEMPLATEID';
export const UPDATEINDEX= 'UPDATEINDEX';
export const FORMNAMEERROR = 'FORMNAMEERROR';
export const ISDUPLICATE= 'ISDUPLICATE';
export const CUSTOMLIST= 'CUSTOMLIST';
export const DRAGEDINPUT= 'DRAGEDINPUT';
export const ISEDIT= 'ISEDIT';
export const SYSTEMGENERATED= 'SYSTEMGENERATED';
export const AUTOGENERATEDFIELD= 'AUTOGENERATEDFIELD';
export const FORMFEATURETYPE= 'FORMFEATURETYPE'; 
export const TABLEFORMDATA = 'TABLEFORMDATA';
export const ORIGINALTEMPLATELIST = 'ORIGINALTEMPLATELIST';

export const setFieldList=(payload: Array<any>): Action=>{
    return {
        type:FIELDLIST,
        payload
    }
}

export const setTemplateList=(payload: Array<any>): Action=>{
    return {
        type:TEMPLATELIST,
        payload
    }
}

export const setDragFrom=(payload: number): Action=>{
    return {
        type:DRAGEDFROM,
        payload
    }
}

export const setDropedTo=(payload: number): Action=>{
    return {
        type:DROPEDTO,
        payload
    }
}

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export const setSelectedTemplateField=(payload: any): Action=>{
    return {
        type:SELECTEDTEMPLATEFIELD,
        payload
    }
}

export const setFormName=(payload: string): Action=>{
    return {
        type:FORMNAME,
        payload
    }
}

export const setFormCurrentTab=(payload: string): Action=>{
    return {
        type:CURRENTTAB,
        payload
    }
}

export const setFeatureId=(payload: number): Action=>{
    return {
        type: FEATUREID,
        payload
    }
}

export const setTemplateId=(payload: number): Action=>{
    return {
        type: TEMPLATEID,
        payload
    }
}

export const setUpdateIndex=(payload: number): Action=>{
    return {
        type: UPDATEINDEX,
        payload
    }
}

export const setFormNameError=(payload: boolean): Action=>{
    return{
        type: FORMNAMEERROR,
        payload
    }
}

export const setIsDuplicate=(payload: boolean): Action=>{
    return {
        type: ISDUPLICATE,
        payload
    }
}

export const setCustomList=(payload: Array<CustomList>): Action=>{
    return{
        type: CUSTOMLIST,
        payload
    }
}

export const setDragedInput=(payload: IFieldInput|unknown): Action=>{
    return{
        type: DRAGEDINPUT,
        payload
    }
}

export const setIsEdit=(payload: boolean): Action=>{
    return{
        type: ISEDIT,
        payload
    }
}

export const setSystemGenerated=(payload: boolean): Action=>{
    return {
        type: SYSTEMGENERATED,
        payload
    }
}

export const setAutoGeneratedFields=(payload: Array<any>): Action=>{
    return {
        type: AUTOGENERATEDFIELD,
        payload
    }
}

export const setFormFeatureType=(payload: string): Action=>{
    return {
        type: FORMFEATURETYPE,
        payload
    }
}

export const setTableFormData=(payload: TableDataList |unknown): Action=>{
    return {
        type: TABLEFORMDATA,
        payload
    }
}

export const setOriginalTemplateList=(payload: Array<any>): Action=>{
    return {
        type:ORIGINALTEMPLATELIST,
        payload
    }
}