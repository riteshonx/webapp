import { gql } from "@apollo/client";
import { FormTemplates } from "../models/formTemplates";

export const LOAD_FORM_TEMPLATES = gql`query getTemplatesByName($name:String!,$featureId:Int,$offset:Int,$limit: Int) {
      ${FormTemplates.modelName}(offset: $offset, limit: $limit, order_by: {templateName: asc},
        where: {_and: {${FormTemplates.selector.featureId}: {_eq: $featureId}, 
        ${FormTemplates.selector.templateName}: {_ilike: $name}}}) {
            ${FormTemplates.selector.id}
            ${FormTemplates.selector.templateName}
            ${FormTemplates.selector.featureId}
            ${FormTemplates.relation.createdByUser} {
              ${FormTemplates.selector.firstName}
              ${FormTemplates.selector.lastName}
            }
            ${FormTemplates.relation.updatedByUser} {
              ${FormTemplates.selector.firstName}
              ${FormTemplates.selector.lastName}
            }
            ${FormTemplates.selector.systemGenerated}
            ${FormTemplates.selector.createdAt}
            ${FormTemplates.selector.updatedAt}
            ${FormTemplates.selector.default}
            ${FormTemplates.selector.formTemplateVersions}{
              ${FormTemplates.selector.formTemplateFieldData}{
                 ${FormTemplates.selector.caption}
                 ${FormTemplates.selector.configListId}
                 ${FormTemplates.selector.elementId}
                 ${FormTemplates.selector.fieldTypeId}
                 ${FormTemplates.selector.fixed}
                 ${FormTemplates.selector.required}
                 ${FormTemplates.selector.sequence}
                 ${FormTemplates.selector.width}
                 ${FormTemplates.selector.autoGenerated}
                 metadata
              }
           }
           projectTemplateAssociations{
            projectId
           }
      }
    }
`;

export const LOAD_DEFAULT_TEMPLATES = gql`
      query getDefaultTemplates($featureId: Int!) {
        defaultFormTemplates(where: {${FormTemplates.selector.featureId}: {_eq: $featureId}}) {
          ${FormTemplates.selector.templateName}
          ${FormTemplates.selector.featureId}
          ${FormTemplates.selector.templateData}
        }
}`;

export const CREATE_TEMPLATE = gql`
  mutation createFormTemplate($featureId: Int!,$objects: [formTemplateDataArray!]!, $templateName:String,$formType: String!) {
    insertFormTemplate_mutation(${FormTemplates.selector.featureId}: $featureId,
       ${FormTemplates.selector.templateData}: $objects,${FormTemplates.selector.templateName}: $templateName, formType: $formType) {
      ${FormTemplates.selector.templateId}
      ${FormTemplates.selector.message}
    }
}`;

export const LOAD_TEMPLATE_DETAILS = gql`query getTemplateDetailsById($templateId: Int!){
  ${FormTemplates.modelName}(where:{${FormTemplates.selector.id}:{_eq: $templateId}}){
    ${FormTemplates.selector.id}
    ${FormTemplates.selector.templateName}
    ${FormTemplates.selector.featureId}
    ${FormTemplates.selector.default}
    ${FormTemplates.selector.systemGenerated}
    ${FormTemplates.selector.formTemplateVersions}{
      ${FormTemplates.selector.formTemplateFieldData}{
         ${FormTemplates.selector.caption}
         ${FormTemplates.selector.configListId}
         ${FormTemplates.selector.elementId}
         ${FormTemplates.selector.fieldTypeId}
         ${FormTemplates.selector.fixed}
         ${FormTemplates.selector.required}
         ${FormTemplates.selector.sequence}
         ${FormTemplates.selector.width}
         ${FormTemplates.selector.autoGenerated}
         metadata
      }
    }
  }
}`;

export const DELETE_TEMPLATE = gql`
  mutation deleteTemplate($id: Int!) {
    update_formTemplates(where: { id: { _eq: $id } }) {
      affected_rows
    }
  }
`;

export const CHECK_DUPLICATE_NAME = gql`query getTemplateByName($templateName: String!, $featureId: Int!){
  formTemplates(where: {featureId: {_eq: $featureId}, templateName: {_ilike: $templateName}}) {
      ${FormTemplates.selector.id}
      ${FormTemplates.selector.templateName}
    }
}`;

export const LOAD_PROJECT_TEMPLATE_WORKFLOW_ASSOCIATION = gql`
  query getProjectAssociationTemplates($name: String!, $featureId: Int!) {
    project(where: { name: { _ilike: $name } }) {
      id
      name
      projectTemplateAssociations(where: { featureId: { _eq: $featureId } }) {
        templateId
        workflowTemplateId
        workflowTemplate {
          rootTemplateId
          active
          parentTemplateId
        }
      }
    }
  }
`;

export const LOAD_TEMPLATE_FOR_ASSOCIATION = gql`
  query getTemplatesFOrAssociation($featureId: Int!) {
    formTemplates(where: { featureId: { _eq: $featureId } }) {
      id
      templateName
    }
  }
`;

export const CREATE_PROJECT_ASSOCIATION = gql`
  mutation createProjectTemplateAssociation(
    $featureId: Int!
    $projectId: Int!
    $templateId: Int!
    $workflowTemplateId: Int!
  ) {
    insert_projectTemplate_mutation(
      featureId: $featureId
      projectId: $projectId
      templateId: $templateId
      workflowTemplateId: $workflowTemplateId
    ) {
      message
      templateId
    }
  }
`;

export const GET_FORM_TEMPLATE_DATA_BY_NAME = gql`
  query getFieldByCaptionName($id: Int!, $caption: String!) {
    formTemplates(where: { id: { _eq: $id } }) {
      formTemplateVersions {
        formTemplateFieldData(where: { caption: { _ilike: $caption } }) {
          caption
          elementId
        }
      }
    }
  }
`;

// update column config
export const UPDATE_COLUMN_CONFIG = gql`
  mutation updateColumnConfig($templateId: Int!, $columnData: [String!]!) {
    insert_columnConfiguration_mutation(
      templateId: $templateId
      orderedElements: $columnData
    ) {
      message
      templateId
    }
  }
`;

// to fetch coloumn config list

export const LOAD_COLUMNCONFIG_TEMPLATE = gql`
  query fetchColConfigTemplate($templateId: Int!) {
    templateColumnConfiguration(where: { templateId: { _eq: $templateId } }) {
      elementId
      fixed
      sequence
    }
  }
`;

export const LOAD_WORKFLOW_TEMPLATES = gql`
  query getAllWorkFlows {
    workflowTemplate(where: { active: { _eq: true } }) {
      id
      name
      rootTemplateId
    }
  }
`;

export const LOAD_TABLE_METADATA_BASEDON_ELEMENTID = gql`
  query fetchTableMetaData($id: Int!, $elementId: uuid!) {
    formTemplates(
      where: {
        id: { _eq: $id }
        formTemplateVersions: {
          formTemplateFieldData: { elementId: { _eq: $elementId } }
        }
      }
    ) {
      formTemplateVersions {
        formTemplateFieldData(where: { elementId: { _eq: $elementId } }) {
          metadata
        }
      }
    }
  }
`;

export const BULK_UPDATE_TEMPLATE = gql`
  mutation updateTemplateBulkAction(
    $featureId: Int!
    $templateData: [updateFormTemplateDataArray!]!
    $templateId: Int!
    $templateName: String!
  ) {
    bulkUpdateFormTemplate_mutation(
      featureId: $featureId
      templateData: $templateData
      templateId: $templateId
      templateName: $templateName
    ) {
      message
      templateId
    }
  }
`;

export const LOAD_UPDATED_WORKFLOW = gql`
  query fetchUpdatedWorkflow($rootTemplateId: Int!) {
    workflowTemplate(
      where: { rootTemplateId: { _eq: $rootTemplateId }, active: { _eq: true } }
    ) {
      id
      name
      rootTemplateId
    }
  }
`;
