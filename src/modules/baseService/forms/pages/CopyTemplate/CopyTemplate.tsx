import React, {ReactElement, useReducer, useEffect, useContext, useState} from 'react';
import Grid from '@material-ui/core/Grid';
import VisibilityIcon from '@material-ui/icons/Visibility';
import './CopyTemplate.scss';
import {createTemplateReducer,createTemplateInitial} from '../../context/templateCreation/reducer';
import { templateCreationContext} from '../../context/templateCreation/context';
import FieldType from '../../components/FieldType/FieldType';
import TemplateFields from '../../components/TemplateFields/TemplateFields';
import { useHistory, useRouteMatch, match } from 'react-router-dom';
import { FormsRoles } from '../../../../../utils/role';
import { CREATE_TEMPLATE, LOAD_TEMPLATE_DETAILS } from '../../grqphql/queries/formTemplates';
import { stateContext } from '../../../../root/context/authentication/authContext';
import { setEditMode, setIsLoading } from '../../../../root/context/authentication/action';
import Preview from '../../components/Preview/Preview';
import { setAutoGeneratedFields, setFeatureId, setFormFeatureType, setFormName, 
    setFormNameError, setIsDuplicate, setTemplateId, setTemplateList } from '../../context/templateCreation/action';
import { TemplateData, TemplateDatePayload } from '../../models/template';
import { Button } from '@material-ui/core';
import { client } from '../../../../../services/graphql';
import { InputType } from '../../../../../utils/constants';
import Notification,{ AlertTypes } from '../../../../shared/components/Toaster/Toaster';
import { LOAD_PRODUCT_FEATURES_DETAILS } from '../../grqphql/queries/projectFeature';
import ConfirmDialog from '../../../../shared/components/ConfirmDialog/ConfirmDialog';
import { canCreateTemplate } from '../../utils/permission';
import { v4 as uuidv4 } from 'uuid';
import { fetchTemplatePayload } from 'src/modules/baseService/formConsumption/utils/formHelper';
import useBeforeunload from "src/customhooks/useUnload";

const confirmMessage = {
    header: "Are you sure?",
    text: "If you cancel now, your changes wonâ€™t be saved.",
    cancel: "Go back",
    proceed: "Yes, I\'m sure",
}
export interface Params {
    id: string;
    name: string;
}


export default function CopyTemplate(): ReactElement {
    const [createTemplateState, createTemplateDispatch] = useReducer(createTemplateReducer, createTemplateInitial);
    const pathMatch:match<Params>= useRouteMatch();
    const {dispatch, state }:any = useContext(stateContext);
    const history= useHistory();
    const [preview, setpreview] = useState(false);
    const [confirmOpen, setConfirmOpen] = useState(false);
    
    useEffect(() => {
        if(canCreateTemplate){
            getTemplateDetails();
            createTemplateDispatch(setTemplateId(Number(pathMatch.params.id)));
        } else{
            // Notification.sendNotification('You don\'t have permission to performthis action',AlertTypes.warn);
            history.push('/pagenotfound');
        }
        return () => {
            dispatch(setEditMode(false));
        }
    }, [])

    useBeforeunload((event: any) => {
        if(state.editMode) {
            event.preventDefault();
        }
    });


    const getFeatureDetails=async (argFeatureId: number)=>{
        try{
            const formListData= await client.query({
                query:LOAD_PRODUCT_FEATURES_DETAILS,
                variables: {
                    featureId: argFeatureId
                },
                fetchPolicy: 'network-only',
                context:{role: FormsRoles.viewFormTemplate}
            });
            if(formListData.data.projectFeature.length>0){
                if(formListData.data.projectFeature[0].tenantId){
                    createTemplateDispatch(setFormFeatureType('OPEN'));
                    // fetchDefaultfields(0);
                } else{
                    createTemplateDispatch(setFormFeatureType('SYSTEM'));
                    // fetchDefaultfields(Number(currentMatch.params.featureId));
                }
                createTemplateDispatch(setFeatureId(argFeatureId))
            } else{
                Notification.sendNotification('Invalid Project feature',AlertTypes.warn);
                history.push('/base/forms');
                dispatch(setIsLoading(false));
            }
        }
        catch(error){
            dispatch(setIsLoading(false));
        }
    }

    const getTemplateDetails= async ()=>{
        try{
            dispatch(setIsLoading(true));
            const formTemplateListData= await client.query({
                query:LOAD_TEMPLATE_DETAILS,
                variables: {templateId: Number(pathMatch.params.id)},
                fetchPolicy: 'network-only',context:{role: FormsRoles.viewFormTemplate}
            });
            if(formTemplateListData.data.formTemplates.length>0){
                dispatch(setIsLoading(false));
                createTemplateDispatch(setFormName(pathMatch.params.name));
                let templateDataList: Array<TemplateData>= [];
                if(formTemplateListData.data.formTemplates[0].formTemplateVersions.length){
                    createTemplateDispatch(setFeatureId(formTemplateListData.data.formTemplates[0].featureId));
                    formTemplateListData.data.formTemplates[0].formTemplateVersions[0].formTemplateFieldData.forEach((item: any)=>{
                        const newTemplateData: TemplateData={
                            id: uuidv4(),
                            fixed: item.fixed,
                            caption: item.caption,
                            required: item.required?1:0,
                            sequence: item.sequence,
                            elementId: item.elementId,
                            fieldTypeId: item.fieldTypeId,
                            width: item.width==50?6:12,
                            configListId: -1,
                            originalCaption: item.caption,
                            autoGenerated: item.autoGenerated,
                            duplicateCaption: false,
                            metadata:item.metadata||null,
                        }
                        if(item.fieldTypeId === InputType.CUSTOMDROPDOWN && item?.configListId){
                            newTemplateData.configListId= item.configListId;
                        }
                        if(item.fieldTypeId=== InputType.TABLE){
                            newTemplateData.width= 12;
                            newTemplateData.showNumberColumn=newTemplateData.metadata?.numbered||false;
                            const colData: Array<any>=[];
                            newTemplateData.metadata.colData.forEach((element: any, cellIndex: number) => {
                               const cellData = JSON.parse(JSON.stringify(element));
                               cellData.position= cellIndex+1;
                               cellData.fieldTypeId=Number(element.fieldTypeId)
                               colData.push(cellData);
                            });
                            newTemplateData.metadata= {...newTemplateData.metadata,colData};
                        }
                        templateDataList.push(newTemplateData);
                    })
                    getFeatureDetails(formTemplateListData.data.formTemplates[0].featureId);
                    let autoGeneratedFields: any[]=[];
                    templateDataList.forEach((item: any)=>{
                       if(item.autoGenerated){
                           autoGeneratedFields.push(item);
                       }
                   });
                   autoGeneratedFields=autoGeneratedFields.sort((a, b) => {
                        if (a.sequence < b.sequence)
                            return -1;
                        if (a.sequence > b.sequence)
                            return 1;
                        return 0;
                    });
                   createTemplateDispatch(setAutoGeneratedFields(autoGeneratedFields));
                   createTemplateDispatch(setAutoGeneratedFields(autoGeneratedFields));
                    templateDataList=templateDataList.sort((a, b) => {
                        if (a.sequence < b.sequence)
                          return -1;
                        if (a.sequence > b.sequence)
                          return 1;
                        return 0;
                      });
    
                    createTemplateDispatch(setTemplateList(templateDataList));
                }
            } else{
                createTemplateDispatch(setTemplateId(Number(-1)));
                Notification.sendNotification('Invalid Project feature',AlertTypes.warn);
                history.push('/base/forms');
            }
        }
        catch(error){
            dispatch(setIsLoading(false));
        }
       
    }

    const close=()=>{
        setpreview(false);
    }

    const previewTemplate=()=>{
        if(createTemplateState.templateList.length>0 && createTemplateState.formName){
            setpreview(true);
        }
    }

    const saveTemplate= async()=>{
        try{
            if(!createTemplateState.formName ){
                createTemplateDispatch(setIsDuplicate(false));
                createTemplateDispatch(setFormNameError(true));
                return;
            }
            if( createTemplateState.isDuplicate){
                return;
            }
            const duplicateCaption=createTemplateState.templateList.filter(item=>{
                return item.duplicateCaption;
            })
            if(duplicateCaption.length>0){
                return;
            }
            if(createTemplateState.templateList.length && createTemplateState.formName && createTemplateState.featureId){
            const fields:TemplateDatePayload[]= fetchTemplatePayload(createTemplateState.templateList, false);
                dispatch(setIsLoading(true));
                if(state.editMode){
                    dispatch(setEditMode(false));
                }
                await client.mutate({mutation:CREATE_TEMPLATE,variables:{
                    featureId: Number(createTemplateState.featureId),
                    objects: fields,
                    templateName: createTemplateState.formName,
                    formType: createTemplateState.formFeatureType,
                },
                context:{role: FormsRoles.createFormTemplate}});
                Notification.sendNotification('Created form template successfully',AlertTypes.success);
                history.push(`/base/forms/${createTemplateState.featureId}`);
            }
        }
        catch(error: any){
            const message=error?.message;
            Notification.sendNotification(message,AlertTypes.error);
            dispatch(setIsLoading(false));
        }
    }

    const backToList=()=>{
        dispatch(setIsLoading(true));
        if(state.editMode){
            dispatch(setEditMode(false));
            setTimeout(() => {
                history.push('/base/forms');       
            }, 100);
        } else{
            history.push('/base/forms');    
        }
    }

    const discardChanges=()=>{
        if(state.editMode){
            setConfirmOpen(true);
        } else{
            backToList();
        }
    }

    return (
        <templateCreationContext.Provider value={{createTemplateState,createTemplateDispatch}} >
        <div className="copyTemplate">
        <div className="copyTemplate__header">
                <div className="copyTemplate__header__left" >
                    <div className="copyTemplate__header__title">Create Template</div>
                    <div className="copyTemplate__header__subtitle">* Fields are mandatory</div>
                </div>
                <div className="copyTemplate__header__action">
                    <Button className="copyTemplate__header__action__preview" 
                        disabled={createTemplateState.templateList.filter(item=>!item.autoGenerated).length===0}
                        onClick={previewTemplate} data-testid="create-template-preview"> 
                        <VisibilityIcon className="copyTemplate__header__action__preview__icon"/>
                        <span className="copyTemplate__header__action__preview__text"> Preview</span> 
                    </Button>
                    <Button variant="outlined"  className="copyTemplate__header__action__discardbtn btn-secondary" 
                        onClick={discardChanges} data-testid="create-template-discard">Discard</Button>
                    <Button variant="outlined" className="btn-primary"
                        disabled={createTemplateState.templateList.length===0 ||
                        !createTemplateState.formName || createTemplateState.formNameError ||
                         createTemplateState.isDuplicate || createTemplateState.formName.trim().length>50}
                     onClick={saveTemplate} data-testid="create-template-save" >Create</Button>
                </div>
            </div>
            <Grid container className="copyTemplate__body">
                <Grid item xs={4} className="copyTemplate__body__fieldsContainer">
                    <FieldType/>
                </Grid>
                <Grid item xs={8} className="copyTemplate__body__fieldsElements">
                    <TemplateFields/>
                </Grid>
            </Grid>
           {preview?(<div className="copyTemplate__preview">
                    <Preview closePreview={close} templateFieldList={createTemplateState.templateList}  
                      autoGeneratedFields={createTemplateState.autoGeneratedFields} formName={createTemplateState.formName}/>
            </div>):("")}
            {<ConfirmDialog open={confirmOpen} message={confirmMessage} close={()=>setConfirmOpen(false)} proceed={backToList} />}
        </div>
        </templateCreationContext.Provider>
    )
}
