import { gql } from "@apollo/client";
import {
  FormTemplateDetailsModel,
  FormTemplateModel,
  FormStatusModel,
} from "../models/dataModels";
import { IStatusListOptions } from "../../pages/EditRfi/EditRfiTypes";

// to fetch list of forms
export const FETCH_LIST_FORMS = gql`
  query getListForm($featureId: Int!, $limit: Int!, $offset: Int!) {
    listForms_query(
      featureId: $featureId
      workflowStep: true
      limit: $limit
      offset: $offset
    ) {
      count
      data {
        formsData
        formState
        id
        submittalId
        blockedByCounter
        workflowData
      }
    }
  }
`;

// to fetch form details
// export const FETCH_FORM_DETAILS = gql`query geFormDetails($formId: Int!) {
//     formDetails_query(formId: $formId) {
//         formsData
//         id
//         templateVersionId
//     }
//  }
// `;

// to fetch the form field with autoGenerated

export const FETCH_FORM_TEMPLATE = gql`
  query fetchprojectTemplateAssociationData($featureId: Int!) {
    projectTemplateAssociation(
      where: { formTemplate: { featureId: { _eq: $featureId } } }
    ) {
      workflowEnabled
      formTemplate {
        templateName
        formTemplateVersions(where: { version: { _eq: null } }) {
          formTemplateFieldData {
            autoGenerated
            caption
            configListId
            elementId
            fieldTypeId
            fixed
            required
            sequence
            width
            tableId
            metadata
          }
          id
          version
        }
      }
    }
  }
`;

// to fetch the form field without autoGenerated

export const FETCH_FORM_TEMPLATE_VIEW = gql`query getViewFormTemplate($featureId: Int!,$versionId: Int) {
  projectTemplateAssociation(where: {formTemplate: {featureId: {_eq: $featureId}}}) {
    ${FormTemplateModel.workflowEnabled}
    ${FormTemplateModel.formTemplate} {
      ${FormTemplateModel.formTemplateVersions}(where: {id: {_eq: $versionId}}) {
        ${FormTemplateModel.formTemplateFieldData} {
          ${FormTemplateModel.selector.caption}
          ${FormTemplateModel.selector.configListId}
          ${FormTemplateModel.selector.elementId}
          ${FormTemplateModel.selector.fieldTypeId}
          ${FormTemplateModel.selector.fixed}
          ${FormTemplateModel.selector.required}
          ${FormTemplateModel.selector.sequence}
          ${FormTemplateModel.selector.width}
          ${FormTemplateModel.selector.filterable}
          ${FormTemplateModel.selector.metadata}
          ${FormTemplateModel.selector.tableId}
          ${FormTemplateModel.selector.metadata}
        }
        ${FormTemplateModel.selector.id}
        ${FormTemplateModel.selector.version}
      }
    }
  }
 }
`;

// to update RFI with exact version

export const FETCH_FORM_TEMPLATE_UPDATE = gql`query getUpdateFormTemplate($versionId: Int) {
      ${FormTemplateModel.formTemplateVersions}(where: {id: {_eq: $versionId}}) {
        ${FormTemplateModel.formTemplateFieldData}  {
          ${FormTemplateModel.selector.autoGenerated}
          ${FormTemplateModel.selector.caption}
          ${FormTemplateModel.selector.configListId}
          ${FormTemplateModel.selector.elementId}
          ${FormTemplateModel.selector.fieldTypeId}
          ${FormTemplateModel.selector.fixed}
          ${FormTemplateModel.selector.required}
          ${FormTemplateModel.selector.sequence}
          ${FormTemplateModel.selector.width}
          ${FormTemplateModel.selector.tableId}
          ${FormTemplateModel.selector.metadata}
        }
        ${FormTemplateModel.selector.id}
      }
 }
`;

export const CREATE_FORM_TEMPLATE_WITHOUT_WORKFLOW = gql`
  mutation createForm(
    $formsData: [json!]!
    $featureId: Int!
    $workflowDisabledDueDate: Date
    $workflowDisabledAssignees: [String!]
  ) {
    insert_formFeature_mutation(
      featureId: $featureId
      formsData: $formsData
      workflowDisabledDueDate: $workflowDisabledDueDate
      workflowDisabledAssignees: $workflowDisabledAssignees
    ) {
      formId
      message
    }
  }
`;

// to create a form template
export const CREATE_FORM_TEMPLATE = gql`
  mutation createForm(
    $formsData: [json!]!
    $featureId: Int!
    $workflowData: [workflowDataArray!]!
  ) {
    insert_formFeature_mutation(
      featureId: $featureId
      formsData: $formsData
      workflowData: $workflowData
    ) {
      formId
      message
    }
  }
`;

// to update a form template
export const UPDATE_FORM_DETAIL_DRAFT = gql`
  mutation updateFormDetails(
    $formId: Int!
    $formsData: [json!]!
    $workflowDurationAndAssignees: [workflowDataArray!]
  ) {
    update_formFeature_mutation(
      formId: $formId
      formsData: $formsData
      workflowDurationAndAssignees: $workflowDurationAndAssignees
    ) {
      message
    }
  }
`;

// to update a form template
export const UPDATE_FORM_WITHOUT_WORKFLOW_DRAFT = gql`
  mutation updateFormDetails(
    $formId: Int!
    $formsData: [json!]!
    $workflowDisabledAssignees: [String!]
    $workflowDisabledDueDate: Date
  ) {
    update_formFeature_mutation(
      formId: $formId
      formsData: $formsData
      workflowDisabledAssignees: $workflowDisabledAssignees
      workflowDisabledDueDate: $workflowDisabledDueDate
    ) {
      message
      __typename
    }
  }
`;

export const UPDATE_FORM_DETAIL_CURRENT_STEP_ASSIGNEE = gql`
  mutation updateFormCurrentStepAssignee($formId: Int!, $formsData: [json!]!) {
    update_formFeature_mutation(formId: $formId, formsData: $formsData) {
      message
    }
  }
`;

// to update a workflow template
export const UPDATE_WORK_FLOW_REVIEW = gql`
  mutation reviewWorkFlow(
    $formId: Int!
    $workflowData: json
    $formsData: [json!]!
  ) {
    update_formFeature_mutation(
      formId: $formId
      workflowData: $workflowData
      formsData: $formsData
    ) {
      message
    }
  }
`;

export const UPDATE_WORK_FLOW_REVIEW_END_STEP = gql`
  mutation reviewWorkFlow($formId: Int!, $workflowData: json) {
    update_formFeature_mutation(formId: $formId, workflowData: $workflowData) {
      message
    }
  }
`;

export const FETCH_DEFAULT_STATUS_LIST_OPTIONS = gql` query getDefaultStatusListOptions {
  ${FormStatusModel.modelName}(where: {featureId: {_is_null: true}} ) {
    ${FormStatusModel.selector.id}
    ${FormStatusModel.selector.status}
    ${FormStatusModel.selector.openStatus}
  }
}
`;

export const FETCH_STATUS_LIST_OPTIONS = gql` query getStatusListOptions ( $featureId: Int!, $projectId: Int!) {
  ${FormStatusModel.modelName}(where: {_or: [{featureId: {_is_null: true}}, {featureId: {_eq: $featureId}}] }) {
    ${FormStatusModel.selector.id}
    ${FormStatusModel.selector.status}
    ${FormStatusModel.selector.openStatus}
    ${FormStatusModel.selector.projectFormStatusAssociations}(where: {projectId: {_eq: $projectId}}) {
      ${FormStatusModel.selector.formStatusId}
    }
  }
}
`;

// to fetch a rfi details
export const FETCH_FORM_TEMPLATE_DETAILS = gql` query getFormDetails ( $formId: Int!) {
    ${FormTemplateDetailsModel.modelName}(formId: $formId) {
      ${FormTemplateDetailsModel.selector.formState}
      ${FormTemplateDetailsModel.selector.formsData}
      ${FormTemplateDetailsModel.selector.workflowData}
      ${FormTemplateDetailsModel.selector.id}
      ${FormTemplateDetailsModel.selector.templateVersionId}
      ${FormTemplateDetailsModel.selector.blockedByCounter}
      ${FormTemplateDetailsModel.selector.specificationId}
      ${FormTemplateDetailsModel.selector.submittalId}
      ${FormTemplateDetailsModel.selector.isImported}

    }
  }
`;

// to delete rfi form
export const DELETE_RFI_FORM = gql`
  mutation deleteForms($formId: Int!) {
    delete_formFeature_mutation(formId: $formId) {
      affected_rows
    }
  }
`;

// to fetch a template column config
export const FETCH_TEMPLATE_COLUMN_CONFIG = gql`
  query getTemplateColumnConfig($featureId: Int!) {
    formTemplates(where: { featureId: { _eq: $featureId } }) {
      templateColumnConfigurations {
        elementId
        fixed
        sequence
        templateId
      }
    }
  }
`;

export const LOAD_FILTER_DROP_DOWN_DATA = gql`
  query fetchFilterDropDownValues($elementId: String!, $featureId: Int!) {
    formFilterDropDown_query(elementId: $elementId, featureId: $featureId) {
      formsDropValues
    }
  }
`;

export const LOAD_FILTERS_LIST_FORM = gql`
  query getFilterListForms(
    $featureId: Int!
    $filterData: [json]
    $limit: Int!
    $offset: Int!
    $order: String!
    $orderBy: String!
  ) {
    listForms_query(
      featureId: $featureId
      filterData: $filterData
      workflowStep: true
      limit: $limit
      offset: $offset
      orderBy: { column: $orderBy, order: $order }
    ) {
      count
      data {
        formsData
        formState
        id
        specificationId
        submittalId
        blockedByCounter
        workflowData
      }
    }
  }
`;

export const FETCH_WORKFLOW_HISTORY = gql`
  query getWorkFlowStepHistory($featureName: String!, $featureId: String!) {
    workflowRuntimeInfo(
      where: {
        featureName: { _eq: $featureName }
        featureType: { _eq: $featureId }
      }
    ) {
      assignedOn
      assigneeUser {
        lastName
        email
        firstName
        id
      }
      outgoingOutcome
      stepDefName
      workflowTemplateStepDef {
        name
        description
        type
      }
      signature
      isActiveTask
      dueDate
      updatedAt
      updatedByUser {
        email
        firstName
        id
        lastName
      }
      comments {
        comment
        createdAt
      }
      attachments {
        blobKey
        fileName
        fileSize
        fileType
      }
    }
  }
`;

// export const FETCH_HISTORY_ACTIVITY = gql`
// query getHistoryactivity($formFeatureId: Int!) {
//   history(where: {formFeatureId: {_eq: $formFeatureId}}, order_by: {createdAt: desc}) {
//     field
//     id
//     verbiage
//     newValue
//     oldValue
//     createdBy
//     createdAt
//     user {
//       id
//       lastName
//       firstName
//       email
//     }
//   }
// }`;

export const FETCH_HISTORY_ACTIVITY = gql`
  query getHistoryactivity($formFeatureId: Int!) {
    history(
      where: { formFeatureId: { _eq: $formFeatureId } }
      order_by: { id: desc, verbiage: asc }
    ) {
      id
      createdAt
      field
      oldValue
      newValue
      verbiage
      user {
        id
        lastName
        firstName
        email
      }
      historyForms {
        userId
        associatedUser {
          firstName
          lastName
          email
        }
        userGroupId
        userGroup {
          name
        }
        attachmentId
        attachment {
          blobKey
          fileName
        }
        companyId
        companyMaster {
          tenantCompanyAssociations {
            name
          }
        }
        configReferenceId
        configurationValue {
          formsConfigLists {
            configValue
          }
        }
        followerUserId
        followerUser {
          firstName
          lastName
          email
        }
        locationReferenceId
        projectLocationTree {
          nodeName
        }
      }
    }
  }
`;

export const FETCH_COMMENTS_HISTORY_ACTIVITY = gql`
  query getHistoryactivity($formFeatureId: Int!) {
    history(
      where: { comment: { formId: { _eq: $formFeatureId } } }
      order_by: { id: desc, verbiage: asc }
    ) {
      id
      createdAt
      field
      oldValue
      newValue
      verbiage
      commentId
      comment {
        comment
      }
      user {
        id
        lastName
        firstName
        email
      }
    }
  }
`;

export const GET_CHECKLIST = gql `
query getChecklists($formId: Int) {
  formsChecklist: formChecklist(where: {formInstanceId: {_eq: $formId}}){
    elementId
    assigneeRole
    assigneeUser
    assigneeCompany
    projectChecklist{
      id
      title
      assigneeRole
      assigneeUser
      assigneeCompany
      projectChecklistItems{
        id
        question
        answers
        selectedAnswer
      }
    }
  }
}
`
export const GET_FORM_ISSUE_LOGS = gql`
query getIssues($formId: Int) {
  formIssueLogs: formIssueLog(where: {formInstanceId: {_eq: $formId}}){
    elementId
    assigneeRole
    assigneeUser
    assigneeCompany
    creator
    linkedForms
  }
}
`